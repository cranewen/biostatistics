go1769308 <- get("1769308_at", env = yeast2GO)
library(yeast2)
library(yeast2.db)
go1769308 <- get("1769308_at", env = yeast2GO)
getOntology(go1769308, "MF")
library("genefilter")
library(ALL)
data(ALL)
rm(list = ls())
data(golub, package="multtest")
clusdata <- data.frame(golub[1042,])
colnames(clusdata)<- c("CCND3 Cyclin D3")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
par(mfrow=c(1,2))
plot(hclust(dist(clusdata, method="euclidian"), method="single"), labels=gol.fac)
plot(hclust(dist(clusdata, method="euclidian"), method="ward.D2"), labels=gol.fac)
cl.2mean <- kmeans(clusdata, centers=2, nstart = 10)
table(gol.fac,cl.2mean$cluster)
clusplot(clusdata, cl.2mean$cluster)
initial <-cl.2mean$centers
n <- dim(clusdata)[1]; nboot<-1000
boot.cl <- matrix(NA,nrow=nboot,ncol = 2)
for (i in 1:nboot){
dat.star <- clusdata[sample(1:n,replace=TRUE),]
cl <- kmeans(dat.star, initial, nstart = 10)
boot.cl[i,] <- c(cl$centers[,1])
}
apply(boot.cl,2,mean)
quantile(boot.cl[,1],c(0.025,0.975))
quantile(boot.cl[,2],c(0.025,0.975))
K<-(1:30); sse<-rep(NA,length(K))
for (k in K) {
sse[k]<-kmeans(clusdata, centers=k,nstart = 10)$tot.withinss
}
plot(K, sse, type='o', xaxt='n'); axis(1, at = K, las=2)
plot(K, sse, type='o', xaxt='n'); axis(1, at = K, las=2)
clOnAn <- grep("oncogene|antigen", golub.gnames[,2])
clOnAn
rm(list = ls())
y<-as.numeric(t(read.table(file="Week 14/DataPois.txt", header=TRUE)))
view(y)
View(y)
table(y)
sum(y)
y
sizeFactors(y)
nrow(y)
row(y)
columns(y)
length(y)
n <- length(y)
mY <- mean(y)
mY
n <- length(y)
m
n
mY <- mean(y)
mY
dpois(y,lambda = mY)
ppois(y,mY)
nloglik <- function (lam) - sum(log(dpois(y, lambda = exp(x))))
#Problem 1
optim(par = 1, nloglik)$par
nloglik <- function (x) - sum(log(dpois(y, lambda = exp(x))))
optim(par = 1, nloglik)$par
sum(log(dpois(y, lambda = exp(mY))))
dpois(y,lambda = mY)
nloglik <- function (lam) - sum(log(dpois(y, lambda = lam)))
optim(par = 1, nloglik(exp(mY)))$par
nloglik(exp(mY))
optim(par = 1, nloglik)$par
lam <- exp(mY)
optim(par = 1, nloglik)$par
nloglik <- sum(log(dpois(y, lambda = exp(mY))))
nloglik
log(dpois(y, lambda = exp(mY)))
x <- dpois(y, exp(mY))
mean(x)
xsd <- sd(x)
xbar <- mean(x)
resample(y)
x <- dpois(y, exp(mY))
xbar <- mean(x)
xsd <- sd(x)
nboot <- 1000
boot.xbar <- rep(NA, nboot)
for (i in 1:nboot) {
data.star <- y[sample(1:n, replace = TRUE)]
boot.xbar[i] <- sum(log(dpois(y, lambda = exp(mY))))
}
quantile(boot.xbar,c(0.05,0.95))
mean(boot.xbar)
mean(nloglik)
install.packages('ISLR')
library(ISLR)
ncidata <- NCI60$data
View(ncidata)
data.frame(ncidata)
View(data.frame(ncidata))
grep('K562A-repro', ncidata)
grep('K562A-repro', ncidata[])
grep('K562A-repro', NCI60)
grep('K562A-repro', NCI60[])
View(NCI60)
View(NCI60$labs)
View(NCI60$data)
NCI60$labs
sort(NCI60$labs)
ncilabs <- NCI60$labs>2
rm(ncilabs)
n_occur <- data.frame(table(NCI60$labs))
n_occur[n_occur$Freq > 2,]
ncilabs <- NCI60$n_occur[n_occur$Freq > 1,]
ncilabs
NCI60$n_occur[n_occur$Freq > 2,]
ncilabs<-n_occur[n_occur$Freq > 2,]
ncilabs
ncilabs<-n_occur[n_occur$Freq > 2,]$Var1
ncilabs
View(ncilabs)
nrow(ncilabs)
ncilabs <- NCI60$labs
n_occur <- data.frame(table(ncilabs))
ncilabs[ncilabs %in% n_occur$Var1[n_occur$Freq >2,]]
ncilabs
n_occur
ncilabs
ncilabs[ncilabs %in% n_occur$Var1[n_occur$Freq >2,],]
ncilabs[ncilabs %in% n_occur$Var1[n_occur$Freq >2,]
]
ncilabs[ncilabs$labs %in% n_occur$Var1[n_occur$Freq >2],]
n_occur <- data.frame(table(ncilabs))
n_occur
ncilabs <- ncilabs[ncilabs$labs %in% n_occur$Var1[n_occur$Freq > 2],]
ncilabs <- ncilabs[ncilabs[labs] %in% n_occur$Var1[n_occur$Freq > 2],]
ncilabs$labs
ncilabs %in% n_occur$Var1[n_occur$Freq>2]
n_occur$Var1[n_occur$Freq>2]
n_occur$Freq>2
n_occur
ncilabs <- n_occur[ncilabs, n_occur$Freq>2]
ncilabs <- n_occur[n_occur$ncilabs, n_occur$Freq>2]
n_occur$ncilabs
ncilabs[NCI60$labs %in% n_occur$Var1[n_occur$Freq > 2],]
n_occur$Var1[n_occur$Freq > 2]
n_occur
ncilabs[NCI60$labs %in% n_occur$ncilabs[n_occur$Freq > 2],]
n_occur$ncilabs[n_occur$Freq > 2]
View(n_occur$ncilabs[n_occur$Freq > 2])
ncilabs <- n_occur$ncilabs[n_occur$Freq > 2]
ncilabs[1]
ncilabs[2]
n_occur <- data.frame(table(NCI60$labs))
n_occur
rm(ncilabs)
n_occur$Var1[n_occur$Freq > 2]
length(n_occur)
sum(n_occur)
View(ncidata$"MELANOMA")
View(NCI60$data$"MELANOMA")
NCI60$labs$"MELANOMA"
n_occur1 <- data.frame(NCI60$labs)
n_occur1
table(n_occur1)
table(NCI60$labs)
n_occur
table(ncidata)
table(NCI60$labs)
NCI60$labs
length(NCI60$labs)
NCI60$labs
table(NCI60$labs)
ncidata[1]
ncidata[2]
ncidata[1,]
View(ncidata[1,])
remove(ncidata[1,])
remove(ncidata, pos = [1,])
library(ALL)
data("ALL")
View(data(ALL))
data(ALL)
View(data(ALL))
View(data.frame(ALL))
patientB <- factor(ALL$BT %in% c("B"))
View(patientB)
View(data.frame(ALL$B))
rm(patientB)
View(ALL)
bALL <- ALL$B
View(bALL)
rm(bALL)
mean(ALL[,1])
ALL[,1]
ALL[,2]
ALL[,3]
data(ALL)
ALL[,3]
ALL[,patientB == TRUE]
patientB <- factor(ALL$BT %in% c("B"))
ALL[,patientB == TRUE]
exprs(patientB)
library("genefilter")
exprs(patientB)
B_ALL <- data.frame(ALL$"B")
B_ALL
data(ALL.B)
data(ALL$B)
data(ALL$BT)
data(ALL)
View(data(ALL))
patientB <- data.frame(ALL$BT %in% c("B"))
View(patientB)
factor
patientB <- factor(ALL$BT %in% c("B"))
View(patientB)
data.frame(ALL)[,1]
allPatient <- data.frame(ALL)
patientB <- factor(ALL$BT %in% c("B"))
mean(allPatient[,1])
mean(allPatient[,patientB==TRUE])
exprs(ALL[,patientB==TRUE])
ALL[,patientB==TRUE]
data.frame(ALL[,patientB==TRUE])
ALLB <- ALL[,which(ALL$BT %in% c("B")]
ALLB <- ALL[,which(ALL$BT %in% c("B"))]
ALLB
View(ALLB)
rm(patientB)
rm(allPatient)
mean(ALLB[1,])
mean(ALLB[,1])
ALLB
View(ALLB)
ALLB <- data.frame(ALL[,which(ALL$BT %in% c("B"))])
ALLB
View(ALLB)
exprs(ALLB)
ALLB <- ALL[,which(ALL$BT %in% c("B"))]
exprs(ALLB)
mean(ALLB)
mean(ALLB[,2])
ALLB
View(ALLB)
length(ALLB)
data.frame(ALLB)
View(data.frame(ALLB))
?ALL
ALL$cod
ALLB$genenames
ALLB$genename
ALLB$gene
ALLB$"X1000_at"
ALLB$09017
ALLB$"09017"
selALLB <- apply(exprs(ALLB), 1, function(x) sd(x)/mean(x)>0.2)
View(selALLB)
length(selALLB)
nSelALLB <- length(selALLB)
selALLB <- apply(exprs(ALLB), 1, function(x) sd(x)/mean(x))
sum(selALLB)
nSelALLB <- length(selALLB)
sum(selALLB>0.2)
cvval <- apply(exprs(ALLB), 1, function(x) sd(x)/mean(x))
cvval
n <- sum(cvval > 0.2)
selALLB <- ALLB[cvval>0.2,]
View(selALLB)
rm(selALLB)
selALLB <- ALLB[cvval>0.2,]
View(selALLB)
clusdata <- data.frame(selALLB, ALL$mol.biol)
View(ALL$mol.biol)
molb<-ALLBm$mol.biol
molb<-ALLB$mol.biol
clusdata <- data.frame(selALLB, molb)
hclust(dist(clusdata, method="euclidian"), method="single")
hclust(dist(clusdata, method="euclidian"), method="complete")
hcALLB.sing <- hclust(dist(clusdata, method="euclidian"), method="single")
View(hcALLB.sing)
clusdata <- data.frame(selALLB)
hcALLB.sing <- hclust(dist(clusdata, method="euclidian"), method="single")
patientB <- ALL[, which(ALL$BT %in% c("B2","B3"))]
f1 <- function(x)(wilcox.test(x, exact = F)$p.value<0.001)
f2 <- function(x)(t.test(x)$p.value<0.001)
sel1 <- genefilter(exprs(patientB), filterfun(f1))
sel2 <- genefilter(exprs(ALL[,patientB==FALSE]), filterfun(f1))
sel3 <- genefilter(exprs(ALL), filterfun(f2))
selected <- sel1 & sel2 & sel3
ALLs <- ALL[selected,]
selected <- sel1 & sel2 & sel3
sel2 <- genefilter(exprs(ALL[,patientB==FALSE]), filterfun(f1))
patientB <- factor(ALL$BT %in% c("B2","B3"))
f1 <- function(x)(wilcox.test(x, exact = F)$p.value<0.001)
f2 <- function(x)(t.test(x)$p.value<0.001)
exprs(patientB)
sel1 <- genefilter(exprs(patientB), filterfun(f1))
sel2 <- genefilter(exprs(ALL[,patientB==FALSE]), filterfun(f1))
sel3 <- genefilter(exprs(ALL), filterfun(f2))
selected <- sel1 & sel2 & sel3
ALLs <- ALL[selected,]
x <- matrix(as.integer(c(sel1,sel2,sel3)),ncol = 3,byrow=FALSE)
colnames(x) <- c("sel1","sel2","sel3")
vc <- vennCounts(x, include="both")
vennDiagram(vc)
fx <- function(x) 2.469862*(x*exp(-x^2))
X_range <- c(1:3)
f_X <- function(x) fx(x)*(x %in% X_range)
EX <- sum(X_range*f_X(X_range))
varX <- sum((X_range-EX)^2*f_X(X_range))
varX
#varX <- var(X_range*f_X(X_range))
sdX <- sqrt(varX)
f_Y <- function(y) 2*y*exp(-y^2)*(y>0)
EY <- integrate(function(y) y*f_Y(y), lower = 0, upper = Inf)$value
varY <- integrate(function(y) (y-EY)^2*f_Y(y), lower = 0, upper = Inf)$value
sdY <- sqrt(varY)
varY
sdY
varX
sdX
EX2 <- mean((rnorm(n = 1000, mean = 0, sd = 1))^2)
EY <- mean(rchisq(n = 1000, df = 4))
EX2/(EX2+EY)
y<-as.numeric(t(read.table(file = "Week 7 and Midterm/normalData.txt", header = T)))
nloglik <- function(theta) -sum(log(dnorm(y, mean=theta, sd=theta)))
optim(par=1, nloglik)$par
library(multtest)
data(golub)
count <- 0
for (i in 1:3051) {
if (t.test(golub[i,])[5] > 0.6) {
count = count + 1
}
}
p.mean <- apply(golub, 1, function(x) t.test(x)$estimate)
p.fdr <-p.adjust(p=p.mean>0.6, method="fdr")
sum(p.fdr < 0.1)
sum(p.mean > 0.6)
oMean <- order(p.mean, decreasing = TRUE)
print(golub.gnames[oMean[1:5], 2])
hist(golub[2715,], xlab = "gene expression values", ylab = "frequency", ylim = range(0:50))
gol.fac <- factor(golub.cl, levels = 0:1, labels = c("ALL", "AML"))
GRO3ALL.fac <- golub[2715,gol.fac=="ALL"]
GRO3AML.fac <- golub[2715,gol.fac=="AML"]
GRO3.fac <- golub[2715,]
MYC.fac <- golub[2302,]
MYCALL.fac <-golub[2302, gol.fac=="ALL"]
MYCAML.fac <-golub[2302, gol.fac=="AML"]
plot(c(GRO3ALL.fac,GRO3AML.fac), col = c("blue","green"), type="o", xlab="Gene", ylab="Gene Expression Values", pch="+", ylim = range(-2,2) )
points(c(MYCALL.fac,MYCAML.fac), col = c("red","green"), type = "o")
legend("topright", c("GRO3","MYC", "Green o&+ are AML", "Other o&+ are ALL"), col=c("blue","red", "green"), lty=c(1,1,1,1), cex = 0.6)
t.test(GRO3.fac,MYC.fac, alternative = "less", var.equal = TRUE)
diff <- GRO3.fac - MYC.fac
prop.test(x = sum(diff<0), n = length(diff), p = 0.5, alternative = "two.sided")
wilcox.test(golub[2715,], golub[2302,], alternative = "less", paired = TRUE)
rowNum <- grep("HPCA Hippocalcin", golub.gnames[,2])
rowNum
HPCA_ALL.fac <- golub[rowNum, gol.fac=="ALL"]
HPCA_nag_count <- 0
lengthOfHPCA_ALL <- length(HPCA_ALL.fac)
for (i in 1:lengthOfHPCA_ALL) {
if (HPCA_ALL.fac[i] < 0) {
HPCA_nag_count = HPCA_nag_count + 1
}
}
p_HPCA <- HPCA_nag_count/lengthOfHPCA_ALL
p_HPCA
t.test(HPCA_ALL.fac, alternative = "less", mu = 0)
HPCA_AML.fac <- golub[rowNum, gol.fac=="AML"]
t.test(HPCA_ALL.fac, HPCA_AML.fac, alternative = "less", mu = 0, conf.level = 0.95)
rm(list = ls())
exit
exit()
quit()
rm(list = ls())
setwd("~/")
rm(list = ls())
setwd("~/Documents/2016 Fall Classes/Statistics for Bioinformatics - MATH 7340")
setwd("~/Documents/2017 Spring Classes/MATH 7340/Week1")
typeof(vec)
vec <- c(5,TRUE)
vec <- c(5,TRUE)
typeof(vec)
class(vec)
x <- 1:4
y <- 1:2
x+y
fsin<-function(x) sin(pi*x)
fsin(1)
c(1,2) %*% t(c(1,2))
f <- function(x) {
g <- function(y) {
y+z
}
z <- 4
x + g(x)
}
z <- 15
f(3)
fs <- function(x) x^2
sum(fs(1):fs(1000))
fs <- function(x) {return x^2}
fs <- function(x) {return x^2}
fs <- function(x) x^2
fs(2)
sum(fs(1:1000))
k <- c(1:20)
X <- 2k
X <- 2*k
X
Y <- rep(0,20)
Y
integrand <- function(x) sqrt(x)
for (i in 1:20) {
if (i < 12) {
Y[i] = 3*k[i]
}else {
Y[i] = integrate(integrand(k[i]), 0, k[i])
}
}
integrand(2)
integrand <- function(x) sqrt(x)
for (i in 1:20) {
if (i < 12) {
Y[i] = 3*k[i]
}else {
Y[i] = integrate(integrand(k[i]), lower = 0, upper = k[i])
}
}
Y
integrand <- function(x) sqrt(x)
for (i in 1:20) {
if (i < 12) {
Y[i] = 3*k[i]
}else {
Y[i] = integrate(integrand, lower = 0, upper = k[i])
}
}
Y
for (i in 1:20) {
if (i < 12) {
Y[i] = 3*k[i]
}else {
Y[i] = integrate(integrand, lower = 0, upper = k[i])$value
}
}
Y
integrand <- function(x) sqrt(x)
for (i in 1:20) {
if (i < 12) {
Y[i] = 3*i
}else {
Y[i] = integrate(integrand, lower = 0, upper = i)$value
}
}
Y
for (i in 1:20) {
if (i < 12) {
Y[i] = 3*i
}else {
Y[i] = integrate(integrand, lower = 0, upper = i)$value
}
}
Y
for (i in 1:20) {
if (i < 12) {
Y = replace(Y,i,as.integer(i*3))
}else {
Y = replace(Y, i, integrate(integrand, lower = 0, upper = i)$value)
}
}
print(Y)
integrand <- function(x) sqrt(x)
for (i in 1:20) {
if (i < 12) {
Y[i] = 3*k[i]
}else {
Y[i] = integrate(integrand, lower = 0, upper = k[i])$value
}
}
print(Y)
for (i in 1:20) {
if (i < 12) {
Y[i] = as.double(3*k[i])
}else {
Y[i] = integrate(integrand, lower = 0, upper = k[i])$value
}
}
print(Y)
Y <- rep(0,20)
X <- 2*k
integrand <- function(x) sqrt(x)
for (i in 1:20) {
if (i < 12) {
Y[i] = as.double(3*k[i])
}else {
Y[i] = integrate(integrand, lower = 0, upper = k[i])$value
}
}
print(Y)
Y <- rep(0,20)
print(Y)
integrand <- function(x) sqrt(x)
for (i in 1:20) {
if (i < 12) {
Y[i] = 3*k[i]
}else {
Y[i] = integrate(integrand, lower = 0, upper = k[i])$value
}
}
print(Y)
